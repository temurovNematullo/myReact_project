{"version":3,"file":"static/js/322.21b59089.chunk.js","mappings":"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","sources":["webpack://myreact-app/./src/components/Main/Main.module.css?5474","webpack://myreact-app/./src/components/Main/MyPost/MyPost.module.css?7b4f","webpack://myreact-app/./src/components/Main/MyPost/Post/Post.module.css?ed3f","components/Main/MyPost/Post/Post.jsx","webpack://myreact-app/./src/components/Main/MyPost/Post/Profile.module.css?0c90","components/Main/MyPost/ProfileStatus.jsx","components/Main/MyPost/PostForm.jsx","components/Main/ProfilePhotoUploader.jsx","components/Main/UserContacts.jsx","components/Main/ProfileInfoForm.jsx","components/Main/MyPost/MyPost.jsx","components/Main/Main.jsx","UTILS/validations.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main__img\":\"Main_main__img__k0bTS\"};","// extracted by mini-css-extract-plugin\nexport default {\"main__title\":\"MyPost_main__title__ctbDe\",\"main__txt\":\"MyPost_main__txt__PRVBI\",\"AddNewPost\":\"MyPost_AddNewPost__otSZW\",\"UserInfo\":\"MyPost_UserInfo__JPf4n\",\"addPost_button\":\"MyPost_addPost_button__jV4-y\",\"textareaPost\":\"MyPost_textareaPost__6AYzv\",\"error\":\"MyPost_error__u2YbK\"};","// extracted by mini-css-extract-plugin\nexport default {\"post__title\":\"Post_post__title__nwpWC\",\"post__txt\":\"Post_post__txt__Nk0Ms\"};","import samurai from '../../../../img/samurai.png';\r\nimport post from './Post.module.css';\r\nimport React from 'react';\r\n\r\nfunction Post(props) {\r\n    console.log(\"Ререндер Post\", props);\r\n    return (\r\n        <div className={post.post__title}>\r\n            <img src={samurai} alt='samurai'/>\r\n            <p className={post.post__txt}>{props.message}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Post);","// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__r7PrX\",\"profileHeader\":\"Profile_profileHeader__fROfE\",\"profileImage\":\"Profile_profileImage__TU-C+\",\"profileDetails\":\"Profile_profileDetails__b7Nzt\",\"contactsList\":\"Profile_contactsList__5MKYR\",\"contactItem\":\"Profile_contactItem__C1gY9\",\"profileInput\":\"Profile_profileInput__kk1nr\",\"profilePhotoUpload\":\"Profile_profilePhotoUpload__efyHA\",\"profileContainerContacts\":\"Profile_profileContainerContacts__AmvEC\"};","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateUserStatus } from \"../../../redux/mainPageReducer\";\r\n\r\nconst ProfileStatus = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n    const isAuth = useSelector((state) => state.Auth.isAuth);\r\n    \r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        if (isAuth) {\r\n            dispatch(updateUserStatus(status));\r\n        }\r\n        setEditMode(false);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                   <span onDoubleClick={isAuth ? activateEditMode : undefined}>\r\n                {props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input \r\n                        autoFocus={true} \r\n                        value={status} \r\n                        onChange={onStatusChange} \r\n                        onBlur={deactivateEditMode} \r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(ProfileStatus);\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { addNewPost} from \"../../../redux/mainPageReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport mypost from \"./MyPost.module.css\";\r\nimport { validationRules } from \"../../../UTILS/validations\";\r\n\r\n const PostForm = () => {\r\n    const dispatch = useDispatch();\r\n  \r\n    const {\r\n      register,\r\n      handleSubmit,\r\n      reset, // Очищает поле после отправки\r\n      formState: { errors, touchedFields },\r\n    } = useForm({mode: \"onChange\"});\r\n  \r\n    const onSubmit = (data) => {\r\n      console.log(\"Отправленные данные:\", data.text);\r\n      dispatch(addNewPost(data.text)); // Отправляем текст в Redux\r\n      reset(); // Очищаем поле после отправки\r\n    };\r\n  \r\n    return (\r\n      <form className={mypost.AddNewPost} onSubmit={handleSubmit(onSubmit)}>\r\n        <div>\r\n          <textarea\r\n            className={`${mypost.textareaPost} ${errors.text? mypost.error: \"\"}`}\r\n            {...register(\"text\", validationRules.dialogTextarea)}\r\n          />\r\n          {touchedFields.text && errors.text && <p>{errors.text.message}</p>}\r\n        </div>\r\n        <button type=\"submit\" className={mypost.addPost_button}>\r\n          Add post\r\n        </button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  export default React.memo(PostForm);","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadProfilePhoto } from \"../../redux/mainPageReducer\";\r\nimport samurai from \"../../img/samurai.png\";\r\nimport styles from \"./MyPost/Post/Profile.module.css\";\r\n\r\nconst ProfilePhotoUploader = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const userPhoto = useSelector((state) => state.MainPage.userProfile.photos?.large);\r\n\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    if (selectedFile) {\r\n      dispatch(uploadProfilePhoto(selectedFile));\r\n      setSelectedFile(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.profileContainer}>\r\n      <img className={styles.profileImage} src={userPhoto || samurai} alt=\"Profile\" />\r\n      <input className={styles.profileInput} id=\"file-upload\" type=\"file\" onChange={handleFileChange} accept=\"image/*\" />\r\n      <label for=\"file-upload\" className={styles.profilePhotoUpload}>Заменить</label>\r\n      <button className={styles.profilePhotoUpload}  onClick={handleUpload} disabled={!selectedFile}>\r\n        Загрузить\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePhotoUploader;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport styles from \"./MyPost/Post/Profile.module.css\";\r\nimport { useSelector, useDispatch} from \"react-redux\";\r\nimport { UploadUserProfile } from '../../redux/mainPageReducer';\r\n\r\nconst UserContacts = (props) => {\r\n    const userProfileData = useSelector((state) => state.MainPage.userProfile);\r\n    const dispatch = useDispatch();\r\n    const isOwner= props.isOwner;\r\n    console.log(\"isOwner\", isOwner);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const { register, handleSubmit, formState: { errors } } = useForm({\r\n        defaultValues: userProfileData\r\n    });\r\n\r\n     const onSubmit = (data) => {\r\n            console.log(\"Отправка данных:\", data);\r\n            dispatch(UploadUserProfile(data));\r\n            setEditMode(false);\r\n        };\r\n\r\n        return (\r\n          <div className={styles.profileContainerContacts}>\r\n              {!editMode ? (\r\n            <div>\r\n                <h3>Контакты:</h3>\r\n                {userProfileData.contacts ? (\r\n              <div className={styles.contactsList}>\r\n                  {Object.entries(userProfileData.contacts).map(([key, value]) =>\r\n                value ? (\r\n                    <div key={key} className={styles.contactItem}>\r\n                  <span><strong>{key}:</strong></span>\r\n                  <a href={value} target=\"_blank\" rel=\"noopener noreferrer\">{value}</a>\r\n                    </div>\r\n                ) : null\r\n                  )}\r\n                  {isOwner && (\r\n                <button onClick={() => setEditMode(true)}>Редактировать контакты</button>\r\n                  )}\r\n              </div>\r\n                ) : (\r\n              <p>Контакты отсутствуют</p> //  Если `contacts === null`, показываем сообщение\r\n                )}\r\n            </div>\r\n              ) : (\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <h3>Редактирование контактов:</h3>\r\n                <div className={styles.contactsList}>\r\n              {Object.entries(userProfileData.contacts).map(([key, value]) => (\r\n                  <div key={key} className={styles.contactItem}>\r\n                <label><strong>{key}:</strong></label>\r\n                \r\n                <input\r\n                    {...register(`contacts.${key}`)}\r\n                    defaultValue={value}\r\n                    type=\"text\"\r\n                    placeholder={`${key}`}\r\n                />\r\n                  </div>\r\n              ))}\r\n                </div>\r\n                <button type=\"submit\">Сохранить</button>\r\n                <button type=\"button\" onClick={() => setEditMode(false)}>Отмена</button>\r\n            </form>\r\n              )}\r\n          </div>\r\n            );\r\n      \r\n};\r\n\r\nexport default UserContacts;","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { UploadUserProfile} from '../../redux/mainPageReducer';\r\nimport styles from '../Main/MyPost/Post/Profile.module.css';\r\nimport mypost from \"../Main/MyPost/MyPost.module.css\";\r\nconst ProfileInfoForm = ({ userProfileData, isOwner }) => {\r\n    const dispatch = useDispatch();\r\n    const [editMode, setEditMode] = useState(false);\r\n    const { register, handleSubmit, formState: { errors } } = useForm({\r\n        defaultValues: userProfileData\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        console.log(\"Отправка данных:\", data);\r\n        dispatch(UploadUserProfile(data));\r\n        \r\n        setEditMode(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode ? (\r\n                <div>\r\n                    <div className={styles.profileHeader}>\r\n                        <h2>{userProfileData.fullName}</h2>\r\n                        <p><strong>Обо мне:</strong> {userProfileData.aboutMe}</p>\r\n                    </div>\r\n                    <div className={styles.profileDetails}>\r\n                        <p><strong>Ищу работу:</strong> {userProfileData.lookingForAJob ? \"Да\" : \"Нет\"}</p>\r\n                        <p><strong>Описание работы:</strong> {userProfileData.lookingForAJobDescription}</p>\r\n                      \r\n                    </div>\r\n                    {isOwner && (\r\n                    <button className={styles.profilePhotoUpload} onClick={() => setEditMode(true)}>Редактировать</button>\r\n                )}\r\n                </div>\r\n            ) : (\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className={styles.profileHeader}>\r\n                        <h2>\r\n                            <input className={mypost.textareaPost} {...register('fullName', { required: true })} defaultValue={userProfileData.fullName} />\r\n                            {errors.fullName && <span>Обязательное поле</span>}\r\n                        </h2>\r\n                        <p>\r\n                            <strong>Обо мне:</strong>\r\n                            <textarea className={mypost.textareaPost} {...register('aboutMe', { required: true })} defaultValue={userProfileData.aboutMe} />\r\n                            {errors.aboutMe && <span>Обязательное поле</span>}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className={styles.profileDetails}>\r\n                        <p><strong>Ищу работу:</strong></p>\r\n                        <p>\r\n                            <input type=\"checkbox\" {...register('lookingForAJob')} defaultChecked={userProfileData.lookingForAJob} />\r\n                        </p>\r\n\r\n                        <p><strong>Описание работы:</strong></p>\r\n                        <p>\r\n                            <textarea className={mypost.textareaPost} {...register('lookingForAJobDescription', { required: true })} defaultValue={userProfileData.lookingForAJobDescription} />\r\n                            {errors.lookingForAJobDescription && <span>Обязательное поле</span>}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <button className={styles.profilePhotoUpload} type=\"submit\">Сохранить</button>\r\n                    <button className={styles.profilePhotoUpload} type=\"button\" onClick={() => setEditMode(false)}>Отмена</button>\r\n                </form>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfoForm;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport mypost from \"./MyPost.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport Preloader from '../../common/preloader/Preloader'\r\nimport { getUserProfile, getUserStatus } from \"../../../redux/mainPageReducer\";\r\nimport styles from \"./Post/Profile.module.css\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport PostForm from \"./PostForm\";\r\nimport ProfilePhotoUploader from \"../ProfilePhotoUploader\"\r\nimport UserContacts from \"../UserContacts\";\r\nimport ProfileInfoForm from \"../ProfileInfoForm\";\r\n\r\n function MyPost({userId, authUserId}) {\r\n  console.log(\"Ререндер MyPosts\")\r\n  const dispatch = useDispatch()\r\n  const isAuth = useSelector((state) => state.Auth.isAuth)\r\n  const status = useSelector((state) => state.MainPage.status)\r\n  const posts = useSelector((state) => state.MainPage.postData, shallowEqual);\r\n  const userProfileData = useSelector((state) => state.MainPage.userProfile, shallowEqual);\r\n  const isOwner = Number(userId ?? authUserId) === Number(authUserId);\r\n\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n    const currentUserId = userId || authUserId;\r\n\r\n    if (currentUserId) {\r\n      dispatch(getUserProfile(currentUserId));\r\n      dispatch(getUserStatus(currentUserId));\r\n     \r\n    }\r\n  }, [userId, authUserId]);\r\n   \r\n\r\n  return (\r\n    <div>\r\n      \r\n    <div className={styles.profileContainer}>\r\n      {userProfileData ? (\r\n        <>\r\n         <ProfilePhotoUploader/>\r\n<ProfileInfoForm userProfileData={userProfileData} isOwner={isOwner}/>\r\n<ProfileStatus authUserId={authUserId} status={status} profileId={userId}/>\r\n        <UserContacts isOwner={isOwner}/>\r\n        </>\r\n      ) : (\r\n        <Preloader />\r\n      )}\r\n    </div> \r\n    {isAuth && (\r\n      <div>\r\n        <PostForm/>\r\n        <div className={mypost.postHave}>\r\n          {posts.map((post) => (\r\n            <Post key={post.id} message={post.message} id={post.id} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default React.memo(MyPost)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import main from './Main.module.css';\r\nimport MyPost from './MyPost/MyPost';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\nimport { useMemo } from 'react';\r\n\r\nfunction Main() {\r\n  const { userId } = useParams(); // Извлекаем userId\r\n  console.log(\"Ререндер Main\");\r\n  const authUserId = useSelector((state) => state.Auth.userId);\r\n  const memoizedUserId = useMemo(() => userId, [userId]);\r\n\r\n  return (\r\n    <main className={main.main}>\r\n      <div className={main.main__img}>\r\n        <img src=\"https://cdn.fastly.steamstatic.com/steamcommunity/public/images/items/1492660/f53947e25201d549d9281bf395e383e17c640587.jpg\" alt=\"main\" />\r\n      </div>\r\n      <MyPost userId={memoizedUserId} authUserId={authUserId} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","export const validationRules = {\r\n    email: {\r\n        required: \"Введите email\",\r\n        pattern:{\r\n            value: /^\\S+@\\S+\\.\\S+$/,\r\n            message: \"Введите корректный email\"\r\n        }\r\n    },\r\n    password: {\r\n        required: \"Введите пароль\",\r\n        minLength: {\r\n        value: 6,\r\n        message: \"Минимум 6 символов\"\r\n        }\r\n    },\r\n    dialogTextarea: {\r\n        required: \"Ведите текст сообщения\",\r\n        maxLength: {\r\n            value: 30,\r\n            message: \"Не дахуя ли символов\"\r\n        }\r\n    },\r\n    confirmPassword: (watch) => ({\r\n        required: \"Повторите пароль\",\r\n        validate: (value) =>\r\n        value === watch(\"password\") || \"Пароли не совпадают\"\r\n    })\r\n    };"],"names":["Post","props","console","log","_jsxs","className","post","children","_jsx","src","samurai","alt","message","React","ProfileStatus","dispatch","useDispatch","editMode","setEditMode","useState","status","setStatus","isAuth","useSelector","state","Auth","useEffect","onDoubleClick","activateEditMode","undefined","autoFocus","value","onChange","e","target","onBlur","deactivateEditMode","updateUserStatus","PostForm","register","handleSubmit","reset","formState","errors","touchedFields","useForm","mode","mypost","AddNewPost","onSubmit","data","text","addNewPost","textareaPost","error","validationRules","dialogTextarea","type","addPost_button","ProfilePhotoUploader","selectedFile","setSelectedFile","userPhoto","_state$MainPage$userP","MainPage","userProfile","photos","large","styles","id","event","files","accept","for","onClick","handleUpload","uploadProfilePhoto","disabled","userProfileData","isOwner","defaultValues","UploadUserProfile","Object","entries","contacts","map","_ref2","key","defaultValue","placeholder","_ref","href","rel","required","fullName","aboutMe","defaultChecked","lookingForAJob","lookingForAJobDescription","MyPost","userId","authUserId","posts","postData","shallowEqual","Number","currentUserId","getUserProfile","getUserStatus","_Fragment","ProfileInfoForm","profileId","UserContacts","Preloader","postHave","useParams","memoizedUserId","useMemo","main","main__img","email","pattern","password","minLength","maxLength","confirmPassword","watch","validate"],"sourceRoot":""}