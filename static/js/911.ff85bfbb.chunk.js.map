{"version":3,"file":"static/js/911.ff85bfbb.chunk.js","mappings":"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","sources":["webpack://myreact-app/./src/components/Main/Main.module.css?5474","webpack://myreact-app/./src/components/Main/MyPost/MyPost.module.css?7b4f","webpack://myreact-app/./src/components/Main/MyPost/Post/Post.module.css?ed3f","components/Main/MyPost/Post/Post.jsx","webpack://myreact-app/./src/components/Main/MyPost/Post/Profile.module.css?0c90","components/Main/MyPost/ProfileStatus.jsx","components/Main/MyPost/PostForm.jsx","components/Main/MyPost/MyPost.jsx","components/Main/Main.jsx","UTILS/validations.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main__img\":\"Main_main__img__k0bTS\"};","// extracted by mini-css-extract-plugin\nexport default {\"main__title\":\"MyPost_main__title__ctbDe\",\"main__txt\":\"MyPost_main__txt__PRVBI\",\"AddNewPost\":\"MyPost_AddNewPost__otSZW\",\"UserInfo\":\"MyPost_UserInfo__JPf4n\",\"addPost_button\":\"MyPost_addPost_button__jV4-y\",\"textareaPost\":\"MyPost_textareaPost__6AYzv\",\"error\":\"MyPost_error__u2YbK\"};","// extracted by mini-css-extract-plugin\nexport default {\"post__title\":\"Post_post__title__nwpWC\",\"post__txt\":\"Post_post__txt__Nk0Ms\"};","import samurai from '../../../../img/samurai.png';\r\nimport post from './Post.module.css';\r\nimport React from 'react';\r\n\r\nfunction Post(props) {\r\n    console.log(\"Ререндер Post\", props);\r\n    return (\r\n        <div className={post.post__title}>\r\n            <img src={samurai} alt='samurai'/>\r\n            <p className={post.post__txt}>{props.message}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Post);","// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__r7PrX\",\"profileHeader\":\"Profile_profileHeader__fROfE\",\"profileImage\":\"Profile_profileImage__TU-C+\",\"profileDetails\":\"Profile_profileDetails__b7Nzt\",\"contactsList\":\"Profile_contactsList__5MKYR\",\"contactItem\":\"Profile_contactItem__C1gY9\"};","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateUserStatus } from \"../../../redux/mainPageReducer\";\r\n\r\nconst ProfileStatus = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n    const isAuth = useSelector((state) => state.Auth.isAuth);\r\n    \r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        if (isAuth) {\r\n            dispatch(updateUserStatus(status));\r\n        }\r\n        setEditMode(false);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                   <span onDoubleClick={isAuth ? activateEditMode : undefined}>\r\n                {props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input \r\n                        autoFocus={true} \r\n                        value={status} \r\n                        onChange={onStatusChange} \r\n                        onBlur={deactivateEditMode} \r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(ProfileStatus);\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { addNewPost} from \"../../../redux/mainPageReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport mypost from \"./MyPost.module.css\";\r\nimport { validationRules } from \"../../../UTILS/validations\";\r\n\r\n const PostForm = () => {\r\n    const dispatch = useDispatch();\r\n  \r\n    const {\r\n      register,\r\n      handleSubmit,\r\n      reset, // Очищает поле после отправки\r\n      formState: { errors, touchedFields },\r\n    } = useForm({mode: \"onChange\"});\r\n  \r\n    const onSubmit = (data) => {\r\n      console.log(\"Отправленные данные:\", data.text);\r\n      dispatch(addNewPost(data.text)); // Отправляем текст в Redux\r\n      reset(); // Очищаем поле после отправки\r\n    };\r\n  \r\n    return (\r\n      <form className={mypost.AddNewPost} onSubmit={handleSubmit(onSubmit)}>\r\n        <div>\r\n          <textarea\r\n            className={`${mypost.textareaPost} ${errors.text? mypost.error: \"\"}`}\r\n            {...register(\"text\", validationRules.dialogTextarea)}\r\n          />\r\n          {touchedFields.text && errors.text && <p>{errors.text.message}</p>}\r\n        </div>\r\n        <button type=\"submit\" className={mypost.addPost_button}>\r\n          Add post\r\n        </button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  export default React.memo(PostForm);","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport mypost from \"./MyPost.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport Preloader from '../../common/preloader/Preloader'\r\nimport { getUserProfile, getUserStatus } from \"../../../redux/mainPageReducer\";\r\nimport styles from \"./Post/Profile.module.css\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport PostForm from \"./PostForm\";\r\nimport samurai from \"../../../img/samurai.png\";\r\n\r\n function MyPost({userId, authUserId}) {\r\n  console.log(\"Ререндер MyPosts\")\r\n  const dispatch = useDispatch()\r\n  const isAuth = useSelector((state) => state.Auth.isAuth)\r\n  const posts = useSelector((state) => state.MainPage.postData)\r\n  const status = useSelector((state) => state.MainPage.status)\r\n  const userProfileData = useSelector((state)=> state.MainPage.userProfile) \r\n \r\n \r\n \r\n  \r\n  useEffect(() => {\r\n    const currentUserId = userId || authUserId;\r\n\r\n    if (currentUserId) {\r\n      dispatch(getUserProfile(currentUserId));\r\n      dispatch(getUserStatus(currentUserId));\r\n     \r\n    }\r\n  }, [userId, authUserId, dispatch]);\r\n   \r\n\r\n  return (\r\n    <div>\r\n      \r\n    <div className={styles.profileContainer}>\r\n      {userProfileData ? (\r\n        <>\r\n          <div className={styles.profileHeader}>\r\n            <img\r\n              className={styles.profileImage}\r\n              src={userProfileData.photos?.large || samurai}\r\n              alt=\"Avatar\"\r\n            />\r\n            <h2>{userProfileData.fullName}</h2>\r\n            <p><strong>Обо мне:</strong> {userProfileData.aboutMe}</p>\r\n          </div>\r\n\r\n          <div className={styles.profileDetails}>\r\n            <p><strong>Ищу работу:</strong></p>\r\n            <p>{userProfileData.lookingForAJob ? \"Да\" : \"Нет\"}</p>\r\n\r\n            <p><strong>Описание работы:</strong></p>\r\n            <p>{userProfileData.lookingForAJobDescription}</p>\r\n          </div>\r\n\r\n<ProfileStatus authUserId={authUserId} status={status} profileId={userId}/>\r\n          \r\n          <h3>Контакты:</h3>\r\n          {userProfileData.contacts ? (\r\n            <div className={styles.contactsList}>\r\n              {Object.entries(userProfileData.contacts).map(([key, value]) =>\r\n                value ? (\r\n                  <div key={key} className={styles.contactItem}>\r\n                    <span><strong>{key}:</strong></span>\r\n                    <a href={value} target=\"_blank\" rel=\"noopener noreferrer\">{value}</a>\r\n                  </div>\r\n                ) : null\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <p>Контакты отсутствуют</p> // ✅ Если `contacts === null`, показываем сообщение\r\n          )}\r\n\r\n        </>\r\n      ) : (\r\n        <Preloader />\r\n      )}\r\n    </div> \r\n    {isAuth && (\r\n      <div>\r\n        <PostForm/>\r\n        <div className={mypost.postHave}>\r\n          {posts.map((post) => (\r\n            <Post key={post.id} message={post.message} id={post.id} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default React.memo(MyPost)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import main from './Main.module.css';\r\nimport MyPost from './MyPost/MyPost';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction Main() {\r\n  const { userId } = useParams(); // Извлекаем userId\r\n  console.log(\"Ререндер Main\");\r\n const authUserId = useSelector((state)=> state.Auth.userId)\r\n  return (\r\n\r\n    <main className={main.main}>\r\n      <div className={main.main__img}>\r\n        <img src=\"https://cdn.fastly.steamstatic.com/steamcommunity/public/images/items/1492660/f53947e25201d549d9281bf395e383e17c640587.jpg\" alt=\"main\" />\r\n      </div>\r\n     <MyPost userId={userId} authUserId={authUserId}\r\n     />\r\n    </main>\r\n    \r\n  );\r\n}\r\n\r\nexport default Main;\r\n","export const validationRules = {\r\n    email: {\r\n        required: \"Введите email\",\r\n        pattern:{\r\n            value: /^\\S+@\\S+\\.\\S+$/,\r\n            message: \"Введите корректный email\"\r\n        }\r\n    },\r\n    password: {\r\n        required: \"Введите пароль\",\r\n        minLength: {\r\n        value: 6,\r\n        message: \"Минимум 6 символов\"\r\n        }\r\n    },\r\n    dialogTextarea: {\r\n        required: \"Ведите текст сообщения\",\r\n        maxLength: {\r\n            value: 30,\r\n            message: \"Не дахуя ли символов\"\r\n        }\r\n    },\r\n    confirmPassword: (watch) => ({\r\n        required: \"Повторите пароль\",\r\n        validate: (value) =>\r\n        value === watch(\"password\") || \"Пароли не совпадают\"\r\n    })\r\n    };"],"names":["Post","props","console","log","_jsxs","className","post","children","_jsx","src","samurai","alt","message","React","ProfileStatus","dispatch","useDispatch","editMode","setEditMode","useState","status","setStatus","isAuth","useSelector","state","Auth","useEffect","onDoubleClick","activateEditMode","undefined","autoFocus","value","onChange","e","target","onBlur","deactivateEditMode","updateUserStatus","PostForm","register","handleSubmit","reset","formState","errors","touchedFields","useForm","mode","mypost","AddNewPost","onSubmit","data","text","addNewPost","textareaPost","error","validationRules","dialogTextarea","type","addPost_button","MyPost","_ref","_userProfileData$phot","userId","authUserId","posts","MainPage","postData","userProfileData","userProfile","currentUserId","getUserProfile","getUserStatus","styles","_Fragment","photos","large","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","profileId","contacts","Object","entries","map","_ref2","key","href","rel","Preloader","postHave","id","useParams","main","main__img","email","required","pattern","password","minLength","maxLength","confirmPassword","watch","validate"],"sourceRoot":""}